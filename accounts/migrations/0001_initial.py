# Generated by Django 2.0.2 on 2018-02-12 05:50

import accounts.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('meta', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jender', models.SmallIntegerField(verbose_name='jender')),
                ('birthday', models.DateField(verbose_name='birthday')),
                ('profession', models.CharField(blank=True, max_length=50, verbose_name='profession')),
                ('line_id', models.CharField(blank=True, max_length=255, verbose_name='LINE ID')),
                ('twitter_id', models.CharField(blank=True, max_length=255, verbose_name='Twitter ID')),
                ('instagram_id', models.CharField(blank=True, max_length=255, verbose_name='Instagram ID')),
                ('facebook_id', models.CharField(blank=True, max_length=255, verbose_name='Facebook ID')),
                ('whatsapp_id', models.CharField(blank=True, max_length=255, verbose_name='WhatsApp ID')),
                ('kik_id', models.CharField(blank=True, max_length=255, verbose_name='KIK ID')),
                ('phone_number', models.CharField(blank=True, max_length=15, verbose_name='phone number')),
                ('notice', models.BooleanField(default=False, verbose_name='notice')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('is_banned', models.BooleanField(default=False, verbose_name='banned')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'member',
                'verbose_name_plural': 'members',
            },
        ),
        migrations.CreateModel(
            name='MemberAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postal_code', models.CharField(max_length=9, verbose_name='postal code')),
                ('address1', models.CharField(max_length=255, verbose_name='address1')),
                ('address2', models.CharField(blank=True, max_length=255, verbose_name='address2')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=50, verbose_name='last name')),
                ('is_default', models.BooleanField(default=False, verbose_name='default')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meta.District', verbose_name='district')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Member', verbose_name='member')),
            ],
            options={
                'verbose_name': "member's address",
                'verbose_name_plural': "member's addresses",
            },
        ),
    ]
